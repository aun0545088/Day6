const fs = require("fs");

console.log("1Ô∏è‚É£ Synchronous Log - Start");

// Microtask (Highest priority after sync code)
process.nextTick(() => console.log("2Ô∏è‚É£ process.nextTick - Executes before Promises"));

// Promise (Microtask)
Promise.resolve().then(() => console.log("3Ô∏è‚É£ Promise - Executes after nextTick"));

// Timer (setTimeout 0ms)
setTimeout(() => console.log("4Ô∏è‚É£ setTimeout(0) - Executes in Timer Phase"), 0);

// Timer (setTimeout 100ms, runs once)
setTimeout(() => console.log("5Ô∏è‚É£ setTimeout(100ms) - Executes after File I/O"), 100);

// File I/O operation (Executes in the I/O Phase)
fs.readFile(__filename, () => {
  console.log("6Ô∏è‚É£ File I/O - Executes in I/O Phase");

  // Adding another microtask inside I/O callback
  process.nextTick(() => console.log("7Ô∏è‚É£ process.nextTick inside I/O - Executes before Timers"));
  
  // Promise inside I/O callback
  Promise.resolve().then(() => console.log("8Ô∏è‚É£ Promise inside I/O - Executes after nextTick inside I/O"));

  // One-time execution using setTimeout (instead of setInterval)
  setTimeout(() => console.log("9Ô∏è‚É£ setTimeout inside I/O - Executes once"), 50);
});

console.log("üîü Synchronous Log - End");



/* 
1Ô∏è‚É£ Synchronous Log - Start
üîü Synchronous Log - End
2Ô∏è‚É£ process.nextTick - Executes before Promises
3Ô∏è‚É£ Promise - Executes after nextTick
4Ô∏è‚É£ setTimeout(0) - Executes in Timer Phase
6Ô∏è‚É£ File I/O - Executes in I/O Phase
7Ô∏è‚É£ process.nextTick inside I/O - Executes before Timers
8Ô∏è‚É£ Promise inside I/O - Executes after nextTick inside I/O
9Ô∏è‚É£ setTimeout inside I/O - Executes once
5Ô∏è‚É£ setTimeout(100ms) - Executes after File I/O
 */